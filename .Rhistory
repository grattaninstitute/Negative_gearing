mutate(hasHadCG = FALSE,  #yet
whenCG.lastoccurred = 0,
prev_unexhausted_loss = loss_ignore_CG)
}
gc()
new_daley %<>%
mutate(rand = runif(nrow(.))) %>%
mutate(noCGevent = rand < prob_of_noCG_if_investor) %>%
mutate(HasCG = !noCGevent) %>%
merge(taxable_income_by_CG, by = "HasCG")  %>%
mutate(
# We act on the new_tax directly.  If someone has a CG event,
# we bring forward all their losses thitherto and reduce their tax
# by the average marginal tax rate for someone who earned capital gains
new_tax = ifelse(noCGevent,
income_tax(new_Taxable_Income, fy.year = fy.year),
# Should negative taxes be included? Answer not yet obvious.
pmax(0, income_tax(new_Taxable_Income, fy.year = fy.year) - marginal.tax.of.avg * loss_carry_fwd_orig * (i - whenCG.lastoccurred))),
diff = new_tax - current_tax,
# record for console printout
whenCG.lastoccurred.prev = whenCG.lastoccurred,
# reset if applicable
whenCG.lastoccurred = ifelse(!noCGevent, i, whenCG.lastoccurred),
hasHadCG = as.logical(pmin(hasHadCG + !noCGevent, 1))
) %>%
select(-marginal.tax.of.avg) %>%
data.table
setTxtProgressBar(progress_bar, value = i)
close(progress_bar)
if(i == eventual){
cat("\n")
}
}
#   return({
#     data.table(Year = year,
#                Initial_revenue_diff = sum(daley_taxstats$diff)*weighting(year)/1e9,
#                Eventual_revenue_diff = sum(new_daley$diff)*weighting(year)/1e9,
#                eventual_means... = paste("After", eventual, "years"),
#                Diff_due_CG = sum(daley_taxstats$tax_after_reduction_in_discount - daley_taxstats$current_tax)*weighting(year)/1e9
#     )
#   })
new_daley
}
prop_full_discount
cost_of_daley_policy(eventual = 1) %>% group_by(apparent.discount) %>% tally
# This is a functional version of the above. It's designed to be easier to read,
# not fast to run.  Beware.
cost_of_daley_policy <- function(year = 2013, eventual = 20, CGT.discount = 0.30){
fy.year <- yr2fy(year)
if (year >= 2014){
# Inflate the wages for future years.  Adjust the variables which depend on Sw_amt
# accordingly (otherwise the difference just becomes smaller).
daley_taxstats <-
fread(sample_file_of(2013)) %>%
mutate(
Taxable_Income = Taxable_Income - Sw_amt + Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013),
Tot_inc_amt = Tot_inc_amt - Sw_amt + Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013),
Sw_amt = Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013)
)
} else {
daley_taxstats <-
# fread(sample_file_of(2013)) %>%
fread(sample_file_of(year = year))
}
# Year specific housekeeping
# Before 2011-12, there is no variable Net_fincl_lss_amt
if (!("Net_fincl_invstmt_lss_amt" %in% names(daley_taxstats)))
daley_taxstats[,Net_fincl_invstmt_lss_amt := 0]
if (!("ETP_txbl_amt" %in% names(daley_taxstats)))
daley_taxstats[,ETP_txbl_amt := 0]
progress_bar <- txtProgressBar(min = 0, max = eventual, title = "Progress")
prop_full_discount <-
get_sample_file(2013) %>%
filter(Net_CG_amt > 0) %>%
group_by(apparent.discount = round(4*Net_CG_amt/Tot_CY_CG_amt,0)/4) %>%
tally() %>%
arrange(apparent.discount) %>%
ungroup %>%
mutate(n.p = n/sum(n),
discount.key = cumsum(n.p))
# More things to consider
# This is a problem.
#   get_sample_file(2013) %>%
#     filter(Net_CG_amt > 0) %>%
#     mutate(discount = Net_CG_amt / Tot_CY_CG_amt,
#            tax.bracket = cut(Taxable_Income, breaks = c(-1,182e2, 37e3, 80e3, 180e3, Inf))) %>%
#     grplot(aes(x = discount, y = Net_CG_amt)) +
#     geom_point() +
#     coord_cartesian(ylim = c(1e4,1e6)) +
#     scale_y_continuous(label = grattan_dollar) +
#     facet_grid(tax.bracket~.)
daley_taxstats %<>%
#
# One silly entry has a CG of $25M!
filter(Net_CG_amt < 5e6) %>%
# These next steps attempt to estimate the size of the typical discount.
# Previously, we assumed that all capital gains events enjoyed the full 50%
# discount.  This was erroneous, but thought not to be a major problem.  It is
# somewhat of a problem.
#
#   get_sample_file(2013) %>%
#     filter(Net_CG_amt > 0) %>%
#     mutate(discount = Net_CG_amt / Tot_CY_CG_amt) %>%
#     grplot(aes(x = discount, y = Net_CG_amt)) +
#     geom_point() +
#     coord_cartesian(ylim = c(1e4,1e6)) +  scale_y_continuous(label = grattan_dollar)
#
#
# so we estimate the number of capital gains events at each discount 0%, 10%, 20%, 30%,
# based on Net capital gains / Total capital gains.  It's important to note
# that this is polluted by losses carried forward.
#
# The dice roll.
mutate(randCG = runif(.)) %>%
rowwise %>%
# If the dice rolls between the discount.keys in prop_full_discount
# we choose the lowest prop
mutate(discount.key = min(prop_full_discount$discount.key[prop_full_discount$discount.key > randCG])) %>%
ungroup %>%
merge(prop_full_discount, by = "discount.key") %>%
# avoid NaNs when we 1/apparent.discount
mutate(apparent.discount = ifelse(apparent.discount < 0.1, 0.05, apparent.discount)) %>%
mutate(
# Adjust the capital gains.  The Net_CG_amt = (Gross CG - Losses) discounted by 50%,
# if the discount applies.  But we use the apparent discount to adjust it, based on the
# dice roll.
new_capital_gains = (1/apparent.discount) * Net_CG_amt * (1 - CGT.discount),
Taxable_Income_Red_CG_discount = Taxable_Income - Net_CG_amt + new_capital_gains,
new_tot_inc = Tot_inc_amt - Net_CG_amt + new_capital_gains,
# component of income from neither salary nor rent
income_no_salary = new_tot_inc - Net_rent_amt - Sw_amt - Alow_ben_amt - ETP_txbl_amt,
#
# This is not quite true: it doesn't include medical offsets.
# You can only deduct Net_rent down to zero.
# Include financial losses in deductions
# Full tax on Sw_amt. Then deductions
new_Taxable_Income =  pmax(0, income_no_salary + Net_rent_amt - Net_fincl_invstmt_lss_amt) + Sw_amt + Alow_ben_amt + ETP_txbl_amt - Tot_ded_amt - PP_loss_claimed - NPP_loss_claimed,
old_Taxable_Income_no_offset = Tot_inc_amt - Tot_ded_amt - PP_loss_claimed - NPP_loss_claimed,
loss_ignore_CG = -1 * pmin(0, pmax(0, income_no_salary - new_capital_gains) + Net_rent_amt),
#
loss_carry_fwd = -1 * pmin(0, income_no_salary + Net_rent_amt),
loss_carry_fwd_not_CG = ifelse(new_capital_gains > abs(Net_rent_amt) & Net_rent_amt < 0, Net_rent_amt, 0),
#
# Ratio of (new?) capital gains to losses is the proportion of each taxpayer's
# capital gains that may be deducted from the rental losses which, due
# to the abolition of negative gearing in this proposal, cannot be immediately
# deducted from one's income.  The sums represent the overall ratio in the population
# which we assume to be constant year-on-year.
#
# pmin sinces can't claim more than your losses
annualized_loss = pmin(1, abs(sum(new_capital_gains) / sum(loss_carry_fwd))) * loss_carry_fwd,  # nonnegative
#
# The consequence of the following calc is that some new_Taxable_Income_post_carryfwd will be NEGATIVE
# -- i.e. unexhausted (especially if the Taxable_Income (originally) was zero).  This error will
# overestimate the amount of extra tax collected.  However
#
#   daley_taxstats %>%
#     filter(new_Taxable_Income_post_carryfwd < 0) %$% sum(new_Taxable_Income) * 50 / 1e9
#   # [1] 0.224  # 224 million in losses
#
# i.e. There are at most 224 million dollars in losses carried forward that are unaccounted for
# in this model.  And so at most 224 * 0.485 = 109 million in taxable income AT MOST that is
# possibly lost. My doona is comfy: I'm staying in bed for that.
new_Taxable_Income_post_carryfwd = new_Taxable_Income - annualized_loss,  # remembering ann.lss is nonnegative
current_tax = income_tax(old_Taxable_Income_no_offset, fy.year= fy.year),
tax_after_reduction_in_discount = income_tax(Taxable_Income_Red_CG_discount, fy.year = fy.year),
new_tax = income_tax(new_Taxable_Income, fy.year = fy.year),
diff = new_tax - current_tax,
diff_incl_carry_fwd = income_tax(new_Taxable_Income_post_carryfwd, fy.year = fy.year) - current_tax
#
# retrospective action
)
taxable_income_by_CG <-
daley_taxstats %>%
group_by(HasCG = new_capital_gains > 0) %>%
summarise(mean.tx.i = mean(new_Taxable_Income)) %>%
mutate(mean.tx = income_tax(mean.tx.i, fy.year = fy.year),
marginal.tax.of.avg = income_tax(mean.tx.i, fy.year = fy.year) - income_tax(mean.tx.i - 1, fy.year = fy.year)) %>%
select(HasCG, marginal.tax.of.avg) %>%
data.table
capital_gains_by_losses4 <-
daley_taxstats %>%
group_by(IsInvestor = Gross_rent_amt > 0,
HasLoss = loss_ignore_CG > 0,
HasCG = new_capital_gains > 0) %>%
tally %>%
arrange(IsInvestor, HasLoss, HasCG) %>%
#
# cosmetics:
ungroup %>%
group_by(IsInvestor) %>%
mutate(prop = round(n/sum(n),3))
# 2012-13 data
# Source: local data table [8 x 5]
#
#   IsInvestor HasLoss HasCG      n  prop
# 1      FALSE   FALSE FALSE 208423 0.968
# 2      FALSE   FALSE  TRUE   6656 0.031
# 3      FALSE    TRUE FALSE    256 0.001
# 4      FALSE    TRUE  TRUE     23 0.000
#--
# 5       TRUE   FALSE FALSE  20753 0.533
# 6       TRUE   FALSE  TRUE   2340 0.060
# 7       TRUE    TRUE FALSE  14724 0.378
# 8       TRUE    TRUE  TRUE   1143 0.029
prob_of_noCG_if_investor <- capital_gains_by_losses4 %>%
filter(IsInvestor, !HasCG) %$%
sum(prop)
for (i in 1:eventual){
if (i == 1){
new_daley <-
daley_taxstats %>%
# random
mutate(loss_carry_fwd_orig = loss_ignore_CG) %>%
mutate(hasHadCG = FALSE,  #yet
whenCG.lastoccurred = 0,
prev_unexhausted_loss = loss_ignore_CG)
}
gc()
new_daley %<>%
mutate(rand = runif(nrow(.))) %>%
mutate(noCGevent = rand < prob_of_noCG_if_investor) %>%
mutate(HasCG = !noCGevent) %>%
merge(taxable_income_by_CG, by = "HasCG")  %>%
mutate(
# We act on the new_tax directly.  If someone has a CG event,
# we bring forward all their losses thitherto and reduce their tax
# by the average marginal tax rate for someone who earned capital gains
new_tax = ifelse(noCGevent,
income_tax(new_Taxable_Income, fy.year = fy.year),
# Should negative taxes be included? Answer not yet obvious.
pmax(0, income_tax(new_Taxable_Income, fy.year = fy.year) - marginal.tax.of.avg * loss_carry_fwd_orig * (i - whenCG.lastoccurred))),
diff = new_tax - current_tax,
# record for console printout
whenCG.lastoccurred.prev = whenCG.lastoccurred,
# reset if applicable
whenCG.lastoccurred = ifelse(!noCGevent, i, whenCG.lastoccurred),
hasHadCG = as.logical(pmin(hasHadCG + !noCGevent, 1))
) %>%
select(-marginal.tax.of.avg) %>%
data.table
setTxtProgressBar(progress_bar, value = i)
close(progress_bar)
if(i == eventual){
cat("\n")
}
}
#   return({
#     data.table(Year = year,
#                Initial_revenue_diff = sum(daley_taxstats$diff)*weighting(year)/1e9,
#                Eventual_revenue_diff = sum(new_daley$diff)*weighting(year)/1e9,
#                eventual_means... = paste("After", eventual, "years"),
#                Diff_due_CG = sum(daley_taxstats$tax_after_reduction_in_discount - daley_taxstats$current_tax)*weighting(year)/1e9
#     )
#   })
new_daley
}
cost_of_daley_policy(eventual = 1) %>% group_by(apparent.discount) %>% tally
policy <- cost_of_daley_policy(2015)
policy %>%
mutate(diff_due_CG = income_tax(Taxable_Income_Red_CG_discount, fy.year = "2014-15") - current_tax) %$%
round(sum(diff_due_CG)*50/1e9, 1) ->
cost_of_red_CGT_discount
cost_of_red_CGT_discount
set.seed(6/247741/1)
runif(1)
set.seed(6/247741/1)
runif(1)
as.integer(6/247741/1)
set.seed(0)
as.integer(6/247741/1)
runif(1)
runif(1)
set.seed(0)
runif(1)
runif(1)
in.what.dollars <- "2013-14"
taxstats_ts %>%
filter(grepl("Net rent.*2", `Selected items`)) %>% ## Net rent2 is an entry on the tax form
filter(!is.na(value), grepl("\\$", unit)) %>%
mutate(fy.year = gsub("[^0-9]", "-", fy.year)) %>%
mutate(value.real = cpi_general_date(nominal.price = value, nominal.date = fy.year, target.date = in.what.dollars),
value.real = value.real / 1e9) %>%
mutate(year = as.numeric(gsub("^.*([0-9]{4}).*$", "\\1", fy.year)) + 1) %T>%
chart_data %>%
grplot +
# geom_line(aes(x = year, y = value.real, group = 1)) +
geom_bar(aes(x = year, y = value.real), stat = "identity")+
annotate("segment", x = 1987.75, xend = 1987.75, y = -Inf, yend = Inf,
linetype = "dashed") +
annotate("text", hjust = 0,
label = "Negative gearing\n(re)introduced",
x = 1987.75+0.25,
size = 7.14,
y = 2) +
annotate("segment",
x = 1999 + 263/365,
xend = 1999 + 263/365,
y = -Inf,
yend = Inf,
linetype = "dashed") +
annotate("text",
x = 2000,
y = 2,
size = 7.14,
hjust = 0,
label = "Capital gains\ndiscount introduced") +
theme(axis.title = element_blank()) +
scale_y_continuous(expand = c(0,0),
limits = c(-12, 5))
taxstats_ts %>%
filter(grepl("(Rent.*interest)|(Gross rent)", `Selected items`)) %>%
spread(`Selected items`, value) %>%
filter(complete.cases(.)) %>%
filter(grepl("\\$", unit)) %>%
mutate(prop = `Rent - interest deductions` / `Gross rent`) ->
prop_rental_deductions_gross_rent
taxstats_ts %>%
filter(grepl("Net rent.*2", `Selected items`)) %>% ## Net rent2 is an entry on the tax form
filter(!is.na(value), grepl("\\$", unit)) %>%
mutate(fy.year = gsub("[^0-9]", "-", fy.year)) %>%
mutate(value.real = cpi_general_date(nominal.price = value, nominal.date = fy.year, target.date = in.what.dollars),
value.real = value.real / 1e9)
taxstats_ts_url <- "https://data.gov.au/dataset/e29ef9ca-0d1a-47ec-9e9b-14a79a941511/resource/233cbf28-6fda-4e53-bbe9-3a37a65fb742/download/taxstats2013individual01selecteditemsbyyear.xlsx"
GET(taxstats_ts_url, write_disk("taxstats_time_series1979-2013.xlsx", overwrite = TRUE))
taxstats_ts_url <- "https://data.gov.au/dataset/e29ef9ca-0d1a-47ec-9e9b-14a79a941511/resource/233cbf28-6fda-4e53-bbe9-3a37a65fb742/download/taxstats2013individual01selecteditemsbyyear.xlsx"
GET(taxstats_ts_url, write_disk("taxstats_time_series1979-2013.xlsx", overwrite = TRUE))
taxstats_ts <- read_excel("taxstats_time_series1979-2013.xlsx", sheet = "Individuals Table 1", skip = 2, na = "na") %>%
setnames(2, "unit") %>%
filter(!is.na(unit))
taxstats_ts <- taxstats_ts %>%
gather_("fy.year", "value", grep("[0-9]{4}", names(taxstats_ts))) %>%
# getting real tired of en-dashes posing as hyphens.  Anything that's not a number is a hyphen
mutate(fy.year = gsub("[^0-9]", "-", fy.year)) %>%
mutate(fy.year = ifelse(fy.year == "1999-2000", "1999-00", fy.year))
taxstats_ts %>%
filter(grepl("(Rent.*interest)|(Gross rent)", `Selected items`)) %>%
spread(`Selected items`, value) %>%
filter(complete.cases(.)) %>%
filter(grepl("\\$", unit)) %>%
mutate(prop = `Rent - interest deductions` / `Gross rent`) ->
prop_rental_deductions_gross_rent
prdgr <- function(fyyear){
prop_rental_deductions_gross_rent %>%
filter(fy.year == fyyear) %$%
round(prop, 3)*100
}
in.what.dollars <- "2013-14"
taxstats_ts %>%
filter(grepl("Net rent.*2", `Selected items`)) %>% ## Net rent2 is an entry on the tax form
filter(!is.na(value), grepl("\\$", unit)) %>%
mutate(fy.year = gsub("[^0-9]", "-", fy.year)) %>%
mutate(value.real = cpi_general_date(nominal.price = value, nominal.date = fy.year, target.date = in.what.dollars),
value.real = value.real / 1e9) %>%
mutate(year = as.numeric(gsub("^.*([0-9]{4}).*$", "\\1", fy.year)) + 1) %T>%
chart_data %>%
grplot +
# geom_line(aes(x = year, y = value.real, group = 1)) +
geom_bar(aes(x = year, y = value.real), stat = "identity")+
annotate("segment", x = 1987.75, xend = 1987.75, y = -Inf, yend = Inf,
linetype = "dashed") +
annotate("text", hjust = 0,
label = "Negative gearing\n(re)introduced",
x = 1987.75+0.25,
size = 7.14,
y = 2) +
annotate("segment",
x = 1999 + 263/365,
xend = 1999 + 263/365,
y = -Inf,
yend = Inf,
linetype = "dashed") +
annotate("text",
x = 2000,
y = 2,
size = 7.14,
hjust = 0,
label = "Capital gains\ndiscount introduced") +
theme(axis.title = element_blank()) +
scale_y_continuous(expand = c(0,0),
limits = c(-12, 5))
source('~/.active-rstudio-document', echo=TRUE)
dat <- matrix(runif(15e3 * 200e3), nrow = 15e3)
dat <- matrix(runif(15e3 * 20e3), nrow = 15e3)
print(object.size(dat), units = "Mb")
dat <- matrix(nrow = 15e3, ncol = 20e3)
dat <- matrix(nrow = 15e3, ncol = 50e3)
print(object.size(dat), units = "Mb")
dat <- matrix(nrow = 15e3, ncol = 100e3)
print(object.size(dat), units = "Mb")
?write_csv
rm(dat)
gc(1,1)
read_excel("ASX_Returns_by_asset_class.xlsx") %>%
gather(tax_class, returnz, -`Asset class`) %>%
# cosmetics
mutate(returnz = returnz/100,
`Asset class` = gsub("\\s+", "\n", `Asset class`),
`Asset class` = gsub("Global\\n", "Global ", `Asset class`)) %>%
#
grplot(aes(y = returnz, x = `Asset class`, fill = tax_class)) +
geom_bar(stat = "identity",
position = "dodge") +
geom_hline(yintercept = 0.028,
color = Orange, size = 2) +
annotate("text", x = 2, y = 0.0299,
hjust = 0,
label = "CPI (2.8% p.a.)", color = Orange, fontface = "bold",
size = 7.14) +
scale_y_continuous(expand = c(0,0), label = percent) +
theme(panel.grid.major = element_blank()) +
coord_flip()
install.packages("extrafonts")
install.packages("extrafont")
library(extrafont); font_import()
?font_import
fonts()
font_import("Arial")
loadfonts()
font_import()
?loadfonts
fonts()
grep("Arial", fonts(), value=T)
theme_hugh
as.Date("Jan-1979", format = "%m%Y")
as.Date("Jan-1979", format = "%B%Y")
as.Date("Jan-1979", format = "%b%Y")
?strptime
as.Date("Jan-1979", format = "%b-%Y")
strptime("Jan-1979", format = "%b-%Y")
as.Date("Jan-1979", format = "%b-%y")
?as.Date
base::as.Date("Jan-1979", format = "%b-%Y")
base::as.Date("jan-1979", format = "%b-%Y")
base::as.Date("jan-1979", format = "01-%b-%Y")
base::as.Date("Jan-1979", format = "01-%b-%Y")
base::as.Date("01-Jan-1979", format = "%d-%b-%Y")
base::as.Date("01-Jan-1979", format = "%d-%B-%Y")
base::as.Date("01-Apr-1979", format = "%d-%B-%Y")
?loadfonts
qplot(1:10, 1:10, "point") + theme_grattan()
qplot(1:10, 1:10, "point") + theme_grattan() + ggtitle(LETTERS,letters)
qplot(1:10, 1:10, "point") + theme_grattan() + ggtitle(paste0(LETTERS,letters))
qplot(1:10, 1:10, "point") + theme_grattan() + ggtitle(paste0(LETTERS,letters, collapse=""))
my_pdf("C:/Users/Hugh/Documents/my_pdf_tester.pdf")
my_pdf <- function(file, width, height){
pdf(file = file, width = width, height = height,
family = "Arial")
}
my_pdf("C:/Users/Hugh/Documents/my_pdf_tester.pdf")
!require(extrafont)
if(require(extrafont) && grepl("Arial", extrafont::fonts())){
loadfonts()
my_pdf <- function(file, width, height){
pdf(file = file, width = width, height = height,
family = "Arial")
}
theme_hugh <- function(...) theme_hugh(base_family = "Arial")
} else {
my_pdf <- function(file, width, height){
pdf(file = file, width, height = height)
}
}
my_pdf
fonts()
grepl("Arial", extrafont::fonts())
if(require(extrafont) && any(grepl("Arial", extrafont::fonts()))){
loadfonts()
my_pdf <- function(file, width, height){
pdf(file = file, width = width, height = height,
family = "Arial")
}
theme_hugh <- function(...) theme_hugh(base_family = "Arial")
} else {
my_pdf <- function(file, width, height){
pdf(file = file, width, height = height)
}
}
my_pdf
?loadfonts
?embed_fonts
?theme
?element_text
theme_hugh
library(grattan)
theme_hugh
grattan::theme_hugh
qplot(1:10, 1:10, "point") + theme_grattan() + ggtitle(paste0(LETTERS,letters, collapse=""))
my_pdf("C:/Users/Hugh/Documents/Arialtest.pdf")
qplot(1:10, 1:10, "point") + theme_grattan() + ggtitle(paste0(LETTERS,letters, collapse=""))
dev.off()
dev.off()
embed_fonts("C:/Users/Hugh/Documents/Arialtest.pdf", outfile = "C:/Users/Hugh/Documents/ArialEmbedtest.pdf")
qplot(1:10, 1:10, "point") + ggtitle(paste0(LETTERS,letters, collapse=""))
library(extrafont)
library(ggplot2)
my_pdf <- function(file, width, height){
pdf(file = file, width = width, height = height,
family = "Arial")
}
my_pdf("ArialTester.pdf")
qplot(1:10, 1:10, "point") + ggtitle(paste0(LETTERS,letters, collapse=""))
dev.off()
?loadfonts
?formatC
loadfonts()
qplot(1:10, 1:10, "point") + ggtitle(paste0(LETTERS,letters, collapse="")) +
theme(text = element_text(family = "Arial"))
ggsave("ArialTester.pdf")
embed_fonts("ArialTester.pdf")
dev.off()
458/72

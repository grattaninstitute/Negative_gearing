marginal.tax.of.avg = income_tax(mean.tx.i, fy.year = fy.year) - income_tax(mean.tx.i - 1, fy.year = fy.year)) %>%
select(HasCG, marginal.tax.of.avg) %>%
data.table
capital_gains_by_losses4 <-
daley_taxstats %>%
group_by(IsInvestor = Gross_rent_amt > 0,
HasLoss = loss_ignore_CG > 0,
HasCG = new_capital_gains > 0) %>%
tally %>%
arrange(IsInvestor, HasLoss, HasCG) %>%
#
# cosmetics:
ungroup %>%
group_by(IsInvestor) %>%
mutate(prop = round(n/sum(n),3))
# 2012-13 data
# Source: local data table [8 x 5]
#
#   IsInvestor HasLoss HasCG      n  prop
# 1      FALSE   FALSE FALSE 208423 0.968
# 2      FALSE   FALSE  TRUE   6656 0.031
# 3      FALSE    TRUE FALSE    256 0.001
# 4      FALSE    TRUE  TRUE     23 0.000
#--
# 5       TRUE   FALSE FALSE  20753 0.533
# 6       TRUE   FALSE  TRUE   2340 0.060
# 7       TRUE    TRUE FALSE  14724 0.378
# 8       TRUE    TRUE  TRUE   1143 0.029
prob_of_noCG_if_investor <- capital_gains_by_losses4 %>%
filter(IsInvestor, !HasCG) %$%
sum(prop)
for (i in 1:eventual){
if (i == 1){
new_daley <-
daley_taxstats %>%
# random
mutate(loss_carry_fwd_orig = loss_ignore_CG) %>%
mutate(hasHadCG = FALSE,  #yet
whenCG.lastoccurred = 0,
prev_unexhausted_loss = loss_ignore_CG)
}
gc()
new_daley %<>%
mutate(rand = runif(nrow(.))) %>%
mutate(noCGevent = rand < prob_of_noCG_if_investor) %>%
mutate(HasCG = !noCGevent) %>%
merge(taxable_income_by_CG, by = "HasCG")  %>%
mutate(
# We act on the new_tax directly.If someone has a CG event,
# we bring forward all their losses thitherto and reduce their tax
# by the average marginal tax rate for someone who earned capital gains
new_tax = ifelse(noCGevent,
income_tax(new_Taxable_Income, fy.year = fy.year),
# Should negative taxes be included? Answer not yet obvious.
pmax(0, income_tax(new_Taxable_Income, fy.year = fy.year) - marginal.tax.of.avg * loss_carry_fwd_orig * (i - whenCG.lastoccurred))),
diff = new_tax - current_tax,
# record for console printout
whenCG.lastoccurred.prev = whenCG.lastoccurred,
# reset if applicable
whenCG.lastoccurred = ifelse(!noCGevent, i, whenCG.lastoccurred),
hasHadCG = as.logical(pmin(hasHadCG + !noCGevent, 1))
) %>%
select(-marginal.tax.of.avg) %>%
data.table
}
#   return({
#     data.table(Year = year,
#                Initial_revenue_diff = sum(daley_taxstats$diff)*weighting(year)/1e9,
#                Eventual_revenue_diff = sum(new_daley$diff)*weighting(year)/1e9,
#                eventual_means... = paste("After", eventual, "years"),
#                Diff_due_CG = sum(daley_taxstats$tax_after_reduction_in_discount - daley_taxstats$current_tax)*weighting(year)/1e9
#     )
#   })
new_daley
}
cost_of_daley_policy_fast2 <- function(year = 2013, eventual = 20, CGT.discount = 0.30){
fy.year <- yr2fy(year)
if (year >= 2014){
# Inflate the wages for future years.
# Adjust the variables which depend on Sw_amt
# accordingly (otherwise the difference just becomes smaller).
daley_taxstats <-
fread(sample_file_of(2013)) %>%
mutate(
Taxable_Income = Taxable_Income - Sw_amt + Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013),
Tot_inc_amt = Tot_inc_amt - Sw_amt + Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013),
Sw_amt = Sw_amt * (wage_inflator(from_fy = "2012-13", to_fy = "2013-14"))^(year - 2013)
)
} else {
daley_taxstats <-
# fread(sample_file_of(2013)) %>%
fread(sample_file_of(year = year))
}
# Year specific housekeeping
# Before 2011-12, there is no variable Net_fincl_lss_amt
if (!("Net_fincl_invstmt_lss_amt" %in% names(daley_taxstats)))
daley_taxstats[,Net_fincl_invstmt_lss_amt := 0]
if (!("ETP_txbl_amt" %in% names(daley_taxstats)))
daley_taxstats[,ETP_txbl_amt := 0]
prop_full_discount <-
get_sample_file(2013) %>%
filter(Net_CG_amt > 0) %>%
mutate(apparent.discount = round(2*Net_CG_amt/Tot_CY_CG_amt)/2,
apparent.discount = ifelse(abs(apparent.discount - 0.5) <= 0.02, 0.50, apparent.discount)) %>%
group_by(apparent.discount) %>%
tally() %>%
arrange(n) %>%
ungroup %>%
filter(apparent.discount %in% c(0.5,1)) %>%
mutate(n.p = n/sum(n),
discount.key = cumsum(n.p))
# More things to consider
# This is a problem.
#   get_sample_file(2013) %>%
#     filter(Net_CG_amt > 0) %>%
#     mutate(discount = Net_CG_amt / Tot_CY_CG_amt,
#            tax.bracket = cut(Taxable_Income, breaks = c(-1,182e2, 37e3, 80e3, 180e3, Inf))) %>%
#     grplot(aes(x = discount, y = Net_CG_amt)) +
#     geom_point() +
#     coord_cartesian(ylim = c(1e4,1e6)) +
#     scale_y_continuous(label = grattan_dollar) +
#     facet_grid(tax.bracket~.)
daley_taxstats %<>%
#
# One silly entry has a CG of $25M!
filter(Net_CG_amt < 5e6)
# These next steps attempt to estimate the size of the typical discount.
# Previously, we assumed that all capital gains events enjoyed the full 50%
# discount. This was erroneous, but thought not to be a major problem. It is
# somewhat of a problem.
#
#   get_sample_file(2013) %>%
#     filter(Net_CG_amt > 0) %>%
#     mutate(discount = Net_CG_amt / Tot_CY_CG_amt) %>%
#     grplot(aes(x = discount, y = Net_CG_amt)) +
#     geom_point() +
#     coord_cartesian(ylim = c(1e4,1e6)) +  scale_y_continuous(label = grattan_dollar)
#
#
# so we estimate the number of capital gains events at each discount 0%, 10%, 20%, 30%,
# based on Net capital gains / Total capital gains.
# It's important to note
# that this is polluted by losses carried forward.
#
# The dice roll.
#
# http://stackoverflow.com/questions/31490534/conditional-join-in-r#31492015
#
daley_taxstats[,randCG := runif(nrow(daley_taxstats))]
setkey(daley_taxstats, randCG)
setkey(prop_full_discount, discount.key)
# Conditional join
daley_taxstats <- prop_full_discount[daley_taxstats, roll=-Inf]
daley_taxstats %<>%
# avoid NaNs when we 1/apparent.discount
mutate(apparent.discount = ifelse(apparent.discount < 0.1, 0.05, apparent.discount)) %>%
mutate(
# Adjust the capital gains.The Net_CG_amt = (Gross CG - Losses) discounted by 50%,
# if the discount applies.But we use the apparent discount to adjust it, based on the
# dice roll.
new_capital_gains = (1/apparent.discount) * Net_CG_amt * (1 - CGT.discount),
Taxable_Income_Red_CG_discount = Taxable_Income - Net_CG_amt + new_capital_gains,
new_tot_inc = Tot_inc_amt - Net_CG_amt + new_capital_gains,
# component of income from neither salary nor rent
income_no_salary = new_tot_inc - Net_rent_amt - Sw_amt - Alow_ben_amt - ETP_txbl_amt,
#
# This is not quite true: it doesn't include medical offsets.
# You can only deduct Net_rent down to zero.
# Include financial losses in deductions
# Full tax on Sw_amt. Then deductions
new_Taxable_Income =  pmax(0, income_no_salary + Net_rent_amt - Net_fincl_invstmt_lss_amt) + Sw_amt + Alow_ben_amt + ETP_txbl_amt - Tot_ded_amt - PP_loss_claimed - NPP_loss_claimed,
old_Taxable_Income_no_offset = Tot_inc_amt - Tot_ded_amt - PP_loss_claimed - NPP_loss_claimed,
loss_ignore_CG = -1 * pmin(0, pmax(0, income_no_salary - new_capital_gains) + Net_rent_amt),
#
loss_carry_fwd = -1 * pmin(0, income_no_salary + Net_rent_amt),
loss_carry_fwd_not_CG = ifelse(new_capital_gains > abs(Net_rent_amt) & Net_rent_amt < 0, Net_rent_amt, 0),
#
# Ratio of (new?) capital gains to losses is the proportion of each taxpayer's
# capital gains that may be deducted from the rental losses which, due
# to the abolition of negative gearing in this proposal, cannot be immediately
# deducted from one's income.The sums represent the overall ratio in the population
# which we assume to be constant year-on-year.
#
# pmin sinces can't claim more than your losses
annualized_loss = pmin(1, abs(sum(new_capital_gains) / sum(loss_carry_fwd))) * loss_carry_fwd,  # nonnegative
#
# The consequence of the following calc is that some new_Taxable_Income_post_carryfwd will be NEGATIVE
# -- i.e.unexhausted (especially if the Taxable_Income (originally) was zero).This error will
# overestimate the amount of extra tax collected.However
#
#   daley_taxstats %>%
#     filter(new_Taxable_Income_post_carryfwd < 0) %$% sum(new_Taxable_Income) * 50 / 1e9
#   # [1] 0.224  # 224 million in losses
#
# i.e.There are at most 224 million dollars in losses carried forward that are unaccounted for
# in this model.And so at most 224 * 0.485 = 109 million in taxable income AT MOST that is
# possibly lost. My doona is comfy: I'm staying in bed for that.
new_Taxable_Income_post_carryfwd = new_Taxable_Income - annualized_loss,  # remembering ann.lss is nonnegative
current_tax = income_tax(old_Taxable_Income_no_offset, fy.year= fy.year),
tax_after_reduction_in_discount = income_tax(Taxable_Income_Red_CG_discount, fy.year = fy.year),
new_tax = income_tax(new_Taxable_Income, fy.year = fy.year),
diff = new_tax - current_tax,
diff_incl_carry_fwd = income_tax(new_Taxable_Income_post_carryfwd, fy.year = fy.year) - current_tax
#
# retrospective action
)
taxable_income_by_CG <-
daley_taxstats %>%
group_by(HasCG = new_capital_gains > 0) %>%
dplyr::summarise(mean.tx.i = mean(new_Taxable_Income)) %>%
mutate(mean.tx = income_tax(mean.tx.i, fy.year = fy.year),
marginal.tax.of.avg = income_tax(mean.tx.i, fy.year = fy.year) - income_tax(mean.tx.i - 1, fy.year = fy.year)) %>%
select(HasCG, marginal.tax.of.avg) %>%
data.table
capital_gains_by_losses4 <-
daley_taxstats %>%
group_by(IsInvestor = Gross_rent_amt > 0,
HasLoss = loss_ignore_CG > 0,
HasCG = new_capital_gains > 0) %>%
tally %>%
arrange(IsInvestor, HasLoss, HasCG) %>%
#
# cosmetics:
ungroup %>%
group_by(IsInvestor) %>%
mutate(prop = round(n/sum(n),3))
# 2012-13 data
# Source: local data table [8 x 5]
#
#   IsInvestor HasLoss HasCG      n  prop
# 1      FALSE   FALSE FALSE 208423 0.968
# 2      FALSE   FALSE  TRUE   6656 0.031
# 3      FALSE    TRUE FALSE    256 0.001
# 4      FALSE    TRUE  TRUE     23 0.000
#--
# 5       TRUE   FALSE FALSE  20753 0.533
# 6       TRUE   FALSE  TRUE   2340 0.060
# 7       TRUE    TRUE FALSE  14724 0.378
# 8       TRUE    TRUE  TRUE   1143 0.029
prob_of_noCG_if_investor <- capital_gains_by_losses4 %>%
filter(IsInvestor, !HasCG) %$%
sum(prop)
for (i in 1:eventual){
if (i == 1){
new_daley <-
daley_taxstats %>%
# random
mutate(loss_carry_fwd_orig = loss_ignore_CG) %>%
mutate(hasHadCG = FALSE,  #yet
whenCG.lastoccurred = 0,
prev_unexhausted_loss = loss_ignore_CG)
}
gc()
new_daley %<>%
mutate(rand = runif(nrow(.))) %>%
mutate(noCGevent = rand < prob_of_noCG_if_investor) %>%
mutate(HasCG = !noCGevent) %>%
merge(taxable_income_by_CG, by = "HasCG")  %>%
mutate(
# We act on the new_tax directly.If someone has a CG event,
# we bring forward all their losses thitherto and reduce their tax
# by the average marginal tax rate for someone who earned capital gains
new_tax = ifelse(noCGevent,
income_tax(new_Taxable_Income, fy.year = fy.year),
# Should negative taxes be included? Answer not yet obvious.
pmax(0, income_tax(new_Taxable_Income, fy.year = fy.year) - marginal.tax.of.avg * loss_carry_fwd_orig * (i - whenCG.lastoccurred))),
diff = new_tax - current_tax,
# record for console printout
whenCG.lastoccurred.prev = whenCG.lastoccurred,
# reset if applicable
whenCG.lastoccurred = ifelse(!noCGevent, i, whenCG.lastoccurred),
hasHadCG = as.logical(pmin(hasHadCG + !noCGevent, 1))
) %>%
select(-marginal.tax.of.avg) %>%
data.table
}
#   return({
#     data.table(Year = year,
#                Initial_revenue_diff = sum(daley_taxstats$diff)*weighting(year)/1e9,
#                Eventual_revenue_diff = sum(new_daley$diff)*weighting(year)/1e9,
#                eventual_means... = paste("After", eventual, "years"),
#                Diff_due_CG = sum(daley_taxstats$tax_after_reduction_in_discount - daley_taxstats$current_tax)*weighting(year)/1e9
#     )
#   })
new_daley
}
SIH11BH <- read.dta("sih11bh.dta")
SIH11BH.df <- data.frame(debt.cc = SIH11BH$LIACCCH, # Amount of credit card debt - household level
debt.hecs =SIH11BH$LIAHECCH, # Amount of HECS/HELP liability
debt.sfs = SIH11BH$LIASFSCH, # Amount of Student Financial Supplement liability
debt.house = SIH11BH$LIASDCH, # Principal outstanding on loans for selected dwelling
debt.inv.loans = SIH11BH$LIAINVCH, # Principal outstanding on investment loans (excl business and rental property loans)
debt.other.prop = SIH11BH$LIAOPCH, # Principal outstanding on loans for other property (excl business and investment loans)
debt.other.purp = SIH11BH$LIAOTCH, # Principal outstanding on loans for other purposes (excl business and investment loans)
debt.vhcles = SIH11BH$LIAVECH, # Principal outstanding on loans for vehicle purchases (excl business and investment loans)
debt.rntl.prop = SIH11BH$LIARPCH, # Principal outstanding on rental property loans
asset.gov.super = SIH11BH$VSUPGCH, # Balance of accounts with government superannuation funds - household level
asset.ngov.super = SIH11BH$VSUPNCH, # Balance of accounts with non-government superannuation funds - household level
asset.oo.res.prop = SIH11BH$HVALUECH, # Estimated sale price of dwelling - HH
asset.otr.res.prop = SIH11BH$VRPRCH, # Value of residential property excl selected dwelling
asset.non.res.prop = SIH11BH$VNRPRCH, # Value of non-residential property
asset.house.contents = SIH11BH$VCONTCH, # Value of contents of selected dwelling
asset.fin.accnts = SIH11BH$VFINCH, # Value of accounts held with financial institutions (excl offset accounts) - household level
asset.off.accnts = SIH11BH$VOFTCH, # Value of offset accounts - household level
asset.bonds = SIH11BH$VDEBCH, # Value of debentures and bonds - household level
asset.childrens = SIH11BH$VCHASSCH, # Value of children's assets
asset.loans = SIH11BH$VPLNCH, # Value of loans to persons not in the same household - household level
asset.otr.fin.invest = SIH11BH$VINVOTCH, # Value of other financial investments - household level
asset.inc.bus = SIH11BH$VIBUSCH, # Value of own incorporated business (net of liabilities) - household level
asset.noninc.bus = SIH11BH$VUBUSCH, # Value of own unincorporated business (net of liabilities) - household level
asset.pr.trusts = SIH11BH$VPRTCH, # Value of private trusts - household level
asset.pub.trusts = SIH11BH$VPUTCH, # Value of public unit trusts - household level
asset.shares = SIH11BH$VSHARCH, # Value of shares - household level
asset.ptnshp = SIH11BH$VSIPCH, # Value of silent partnerships - household level
asset.vhcles = SIH11BH$VVEHICH, # Value of vehicles
wealth.hhold = SIH11BH$WEALTHH, # Net wealth of household
hh.weight = SIH11BH$SIHHHWT, # # Weight - HH (SIH)
age = SIH11BH$AGERHBC, # Age of HH reference person
ABSHID = SIH11BH$ABSHID, # Household ID
income.disp.an = SIH11BH$DISPSCH8 *52, # Current weekly HH disposable income
income.total.an = SIH11BH$INCTSCH8 *52, # Total current weekly HH income from all sources
equiv.factor = SIH11BH$EQUIVH) # HH equivalising factor
# Setting up variables of interest ------------------------------------------------------------
# New we build a few identities so that we can group assets and liabilities by broad types
SIH11BH.df <- SIH11BH.df %>% mutate(Home = asset.oo.res.prop,
Other.property = asset.otr.res.prop + asset.non.res.prop,
Super = asset.gov.super + asset.ngov.super,
Other.financial.assets = asset.fin.accnts + asset.off.accnts + asset.bonds + asset.otr.fin.invest + asset.shares,
House.mortgage = debt.house,
Investment.property.loans = debt.rntl.prop + debt.other.prop,
Other.liabilities = debt.cc + debt.hecs + debt.sfs + debt.inv.loans + debt.other.purp + debt.vhcles,
All.liabilities = House.mortgage + Investment.property.loans + Other.liabilities,
All.liabilities.ex.house = All.liabilities - House.mortgage,
All.other.assets = wealth.hhold - Home- Other.property - Super - Other.financial.assets + All.liabilities)
SIHHHI <- svydesign(id=~ABSHID, weights= ~hh.weight, fpc=NULL, data = SIH11BH.df)
# Deciles for net wealth, total income and disposable income
SIHHHI.wealth10 <- svyquantile(~wealth.hhold, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
SIHHHI.total.income10 <- svyquantile(~income.total.an, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
SIHHHI.disp.income10 <- svyquantile(~income.disp.an, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
# So now we use cut to break up the dataset along the weighted quintiles specified in the survey object
# These are assigned as a column in HSL.results.dist
#For quintiles
SIH11BH.df$HHW.quintiles <- cut(SIH11BH.df$wealth.hhold, breaks = SIHHHI.wealth5) %>% as.numeric()
SIH11BH.df$HHTI.quintiles <- cut(SIH11BH.df$income.total.an, breaks = SIHHHI.total.income5) %>% as.numeric()
SIH11BH.df$HHDI.quintiles <- cut(SIH11BH.df$income.disp.an, breaks = SIHHHI.disp.income5) %>% as.numeric()
# For deciles
SIH11BH.df$HHW.deciles <- cut(SIH11BH.df$wealth.hhold, breaks = SIHHHI.wealth10) %>% as.numeric()
SIH11BH.df$HHDI.deciles <- cut(SIH11BH.df$income.total.an, breaks = SIHHHI.total.income10) %>% as.numeric()
SIH11BH.df$HHDI.deciles <- cut(SIH11BH.df$income.disp.an, breaks = SIHHHI.disp.income10) %>% as.numeric()
# Splitting hhold wealth by major assets and liabilities, by wealth decile ------------------------------------------------------------
# We create a summary chart breaking down net wealth into its main components, by net wealth decile
# Later on we will restrict all of this only to those with total incomes of more than $150k
Wealth.by.decile <-
SIH11BH.df %>%
group_by(HHW.deciles) %>%
filter(!is.na(HHW.deciles)) %>%
dplyr::summarise ("Home" = sum(Home * hh.weight) / sum(hh.weight) / 10^6,
"Other property" = sum(Other.property * hh.weight) / sum(hh.weight) / 10^6,
"Super" = sum(Super * hh.weight) / sum(hh.weight) / 10^6,
"Other Financial Assets" = sum(Other.financial.assets * hh.weight) / sum(hh.weight) / 10^6,
"Other Assets" = sum(All.other.assets * hh.weight) / sum(hh.weight) / 10^6,
"Liabilities" = -sum(All.liabilities * hh.weight) / sum(hh.weight) / 10^6,
"Net wealth" = sum(wealth.hhold * hh.weight) / sum(hh.weight) / 10^6) %>%
ungroup %>%
gather(Asset_class, wealth, -HHW.deciles)
Wealth.by.decile %>%
filter(!(Asset_class %in% c("Net wealth", "Liabilities"))) %>%
group_by(HHW.deciles) %>%
mutate(prop.wealth = wealth/sum(wealth)) %>%
grplot(aes(x = factor(HHW.deciles), y = prop.wealth, fill=Asset_class)) +
#   geom_line(aes(color = Asset_class, group = Asset_class, label=Asset_class)) +
#   annotate("blank", x = 12, y = 0) +
#   geom_dl(method = "last.points") +
geom_bar(stat = "identity",
width = 1,
position = "stack") +
theme(legend.position = "right")
SIH11BH <- read.dta("sih11bh.dta")
sih11bh.dta
dir("./SIH")
SIH11BH <- read.dta("./SIH/sih11bh.dta")
SIH11BH <- read.dta("./SIH/sih11bh.dta")
SIH11BH.df <- data.frame(debt.cc = SIH11BH$LIACCCH, # Amount of credit card debt - household level
debt.hecs =SIH11BH$LIAHECCH, # Amount of HECS/HELP liability
debt.sfs = SIH11BH$LIASFSCH, # Amount of Student Financial Supplement liability
debt.house = SIH11BH$LIASDCH, # Principal outstanding on loans for selected dwelling
debt.inv.loans = SIH11BH$LIAINVCH, # Principal outstanding on investment loans (excl business and rental property loans)
debt.other.prop = SIH11BH$LIAOPCH, # Principal outstanding on loans for other property (excl business and investment loans)
debt.other.purp = SIH11BH$LIAOTCH, # Principal outstanding on loans for other purposes (excl business and investment loans)
debt.vhcles = SIH11BH$LIAVECH, # Principal outstanding on loans for vehicle purchases (excl business and investment loans)
debt.rntl.prop = SIH11BH$LIARPCH, # Principal outstanding on rental property loans
asset.gov.super = SIH11BH$VSUPGCH, # Balance of accounts with government superannuation funds - household level
asset.ngov.super = SIH11BH$VSUPNCH, # Balance of accounts with non-government superannuation funds - household level
asset.oo.res.prop = SIH11BH$HVALUECH, # Estimated sale price of dwelling - HH
asset.otr.res.prop = SIH11BH$VRPRCH, # Value of residential property excl selected dwelling
asset.non.res.prop = SIH11BH$VNRPRCH, # Value of non-residential property
asset.house.contents = SIH11BH$VCONTCH, # Value of contents of selected dwelling
asset.fin.accnts = SIH11BH$VFINCH, # Value of accounts held with financial institutions (excl offset accounts) - household level
asset.off.accnts = SIH11BH$VOFTCH, # Value of offset accounts - household level
asset.bonds = SIH11BH$VDEBCH, # Value of debentures and bonds - household level
asset.childrens = SIH11BH$VCHASSCH, # Value of children's assets
asset.loans = SIH11BH$VPLNCH, # Value of loans to persons not in the same household - household level
asset.otr.fin.invest = SIH11BH$VINVOTCH, # Value of other financial investments - household level
asset.inc.bus = SIH11BH$VIBUSCH, # Value of own incorporated business (net of liabilities) - household level
asset.noninc.bus = SIH11BH$VUBUSCH, # Value of own unincorporated business (net of liabilities) - household level
asset.pr.trusts = SIH11BH$VPRTCH, # Value of private trusts - household level
asset.pub.trusts = SIH11BH$VPUTCH, # Value of public unit trusts - household level
asset.shares = SIH11BH$VSHARCH, # Value of shares - household level
asset.ptnshp = SIH11BH$VSIPCH, # Value of silent partnerships - household level
asset.vhcles = SIH11BH$VVEHICH, # Value of vehicles
wealth.hhold = SIH11BH$WEALTHH, # Net wealth of household
hh.weight = SIH11BH$SIHHHWT, # # Weight - HH (SIH)
age = SIH11BH$AGERHBC, # Age of HH reference person
ABSHID = SIH11BH$ABSHID, # Household ID
income.disp.an = SIH11BH$DISPSCH8 *52, # Current weekly HH disposable income
income.total.an = SIH11BH$INCTSCH8 *52, # Total current weekly HH income from all sources
equiv.factor = SIH11BH$EQUIVH) # HH equivalising factor
# Setting up variables of interest ------------------------------------------------------------
# New we build a few identities so that we can group assets and liabilities by broad types
SIH11BH.df <- SIH11BH.df %>% mutate(Home = asset.oo.res.prop,
Other.property = asset.otr.res.prop + asset.non.res.prop,
Super = asset.gov.super + asset.ngov.super,
Other.financial.assets = asset.fin.accnts + asset.off.accnts + asset.bonds + asset.otr.fin.invest + asset.shares,
House.mortgage = debt.house,
Investment.property.loans = debt.rntl.prop + debt.other.prop,
Other.liabilities = debt.cc + debt.hecs + debt.sfs + debt.inv.loans + debt.other.purp + debt.vhcles,
All.liabilities = House.mortgage + Investment.property.loans + Other.liabilities,
All.liabilities.ex.house = All.liabilities - House.mortgage,
All.other.assets = wealth.hhold - Home- Other.property - Super - Other.financial.assets + All.liabilities)
SIHHHI <- svydesign(id=~ABSHID, weights= ~hh.weight, fpc=NULL, data = SIH11BH.df)
# Deciles for net wealth, total income and disposable income
SIHHHI.wealth10 <- svyquantile(~wealth.hhold, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
SIHHHI.total.income10 <- svyquantile(~income.total.an, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
SIHHHI.disp.income10 <- svyquantile(~income.disp.an, SIHHHI,c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1), ci = FALSE)
# So now we use cut to break up the dataset along the weighted quintiles specified in the survey object
# These are assigned as a column in HSL.results.dist
#For quintiles
SIH11BH.df$HHW.quintiles <- cut(SIH11BH.df$wealth.hhold, breaks = SIHHHI.wealth5) %>% as.numeric()
SIH11BH.df$HHTI.quintiles <- cut(SIH11BH.df$income.total.an, breaks = SIHHHI.total.income5) %>% as.numeric()
SIH11BH.df$HHDI.quintiles <- cut(SIH11BH.df$income.disp.an, breaks = SIHHHI.disp.income5) %>% as.numeric()
# For deciles
SIH11BH.df$HHW.deciles <- cut(SIH11BH.df$wealth.hhold, breaks = SIHHHI.wealth10) %>% as.numeric()
SIH11BH.df$HHDI.deciles <- cut(SIH11BH.df$income.total.an, breaks = SIHHHI.total.income10) %>% as.numeric()
SIH11BH.df$HHDI.deciles <- cut(SIH11BH.df$income.disp.an, breaks = SIHHHI.disp.income10) %>% as.numeric()
# Splitting hhold wealth by major assets and liabilities, by wealth decile ------------------------------------------------------------
# We create a summary chart breaking down net wealth into its main components, by net wealth decile
# Later on we will restrict all of this only to those with total incomes of more than $150k
Wealth.by.decile <-
SIH11BH.df %>%
group_by(HHW.deciles) %>%
filter(!is.na(HHW.deciles)) %>%
dplyr::summarise ("Home" = sum(Home * hh.weight) / sum(hh.weight) / 10^6,
"Other property" = sum(Other.property * hh.weight) / sum(hh.weight) / 10^6,
"Super" = sum(Super * hh.weight) / sum(hh.weight) / 10^6,
"Other Financial Assets" = sum(Other.financial.assets * hh.weight) / sum(hh.weight) / 10^6,
"Other Assets" = sum(All.other.assets * hh.weight) / sum(hh.weight) / 10^6,
"Liabilities" = -sum(All.liabilities * hh.weight) / sum(hh.weight) / 10^6,
"Net wealth" = sum(wealth.hhold * hh.weight) / sum(hh.weight) / 10^6) %>%
ungroup %>%
gather(Asset_class, wealth, -HHW.deciles)
Wealth.by.decile %>%
filter(!(Asset_class %in% c("Net wealth", "Liabilities"))) %>%
group_by(HHW.deciles) %>%
mutate(prop.wealth = wealth/sum(wealth)) %>%
grplot(aes(x = factor(HHW.deciles), y = prop.wealth, fill=Asset_class)) +
#   geom_line(aes(color = Asset_class, group = Asset_class, label=Asset_class)) +
#   annotate("blank", x = 12, y = 0) +
#   geom_dl(method = "last.points") +
geom_bar(stat = "identity",
width = 1,
position = "stack") +
theme(legend.position = "right")
hilda_names <- read.dta("./HILDA/Household_j130c.dta") %>% names
HILDA_wave10 <- read.dta("./HILDA/Household_j130c.dta") %>%
data.table %>%
mutate(
# NA casting
jhifeftp = ifelse(jhifeftp < 0, NA, jhifeftp),
jhifeftn = ifelse(jhifeftn < 0, NA, jhifeftn),
fy_gross_tot_inc = jhifeftp - jhifeftn
)
## Alternative see HILDA Figure 4.9 Wealth model (household-level)
HILDA_wave10.svy <- svydesign(ids = ~0, data = HILDA_wave10, weights = ~jhhwth)
HILDA10_income_deciles <- svyquantile(~fy_gross_tot_inc, HILDA_wave10.svy, quantiles = (0:10)/10 )
# HILDA10_asset_deciles <- svyquantile(~jhwassei, HILDA_wave10.svy, quantiles = (0:10)/10)
HILDA_wave10 %>%
data.table %>%
select(
jhwtbani # Bank accounts
, jhwassei # Total assets
, jhifeftp #  FY gross total income
, jhhwth  # household weight (Cross-section)
) %>%
# All these negative numbers are various flavours of NA
mutate(jhifeftp = ifelse(jhifeftp %in% c(-10:-1), NA, jhifeftp),
jhwtbani = ifelse(jhwtbani %in% c(-10:-1), NA, jhwtbani),
jhwassei = ifelse(jhwassei %in% c(-10:-1), NA, jhwassei)) %>%
mutate(prop_bank = jhwtbani/(jhwassei + 1)) %>%
group_by(Income_decile = factor(as.numeric(cut(jhifeftp, breaks = HILDA10_income_deciles)))) %>%
filter(!is.na(Income_decile)) %>%
dplyr::summarise(mean_prop_bank = weighted.mean(prop_bank, jhhwth),
mean_asset = mean(jhwassei),
mean_inco = mean(jhifeftp))
.Last.value %>% arrange(Income_decile)
x <- "A\\B"
x
pmt <- function(rate, nper, pv, fv=0, type=0) {
rr <- 1/(1+rate)^nper
res <- (-pv-fv*rr)*rate/(1-rr)
return(res/(1+rate*type))
}
pmt(0.06, 15, 40e6)

\documentclass[a3paper]{report}
\usepackage[twocolumn,landscape]{geometry}
\addtolength\columnsep{10pt}
\begin{document}


<<packages>>=
knitr::opts_chunk$set(fig.width = 11, out.width = "11in", fig.show = "hide", cache=TRUE)
library(tidyr)
library(data.table)
library(foreign)
library(dplyr)
library(magrittr)
library(survey)
library(ggplot2)
library(grattan)
@

<<functions>>=
read_hilda_strip_first_letter_add_column_id <- 
  function(filename, n_waves = 14){  
    temp <- fread(filename)
    nms <- names(temp)
    # detect the prefix if it is the wave id.
    nms.prefixes <- unique(gsub("^(.).*$", "\\1", nms))
    yearid <- nms.prefixes[nms.prefixes %in% letters[1:n_waves]]
    # we're interested in stripping the names that specify the wave id (a-m)
    
    setnames(temp, old = nms, new = sub(paste0("^[a-", letters[n_waves],"]"), "", nms))
    
    wave.decoder <- 
      data.table(
        wave = letters[1:n_waves],
        Year = 2000 + 1:n_waves
      ) %>%
      setkey(wave)
    
    temp %<>% mutate(wave = yearid) 
    
    setkey(temp, wave)
    temp <- merge(temp, wave.decoder)
  }

read_hilda_file <- 
  function(filename){
    dplyr::mutate(data.table::data.table(foreign::read.dta(filename)),
                  orig.filename = filename)
  }

@

<<loadHilda>>=
# hilda.w14.hh <- foreign::read.dta("../HILDA/Wave14/Household_n140c.dta")
hilda.w14.hh.raw <- as.data.table(readRDS("../HILDA/Wave14/csv/Household_n140c.rds"))

metadata <- fread("../HILDA/csv/data_dictionary.csv")

# Some of the descriptions have caveats or 
bracketed.items <- 
  metadata %>% 
  filter(grepl("\\[", Description)) %$% 
  stringr::str_extract_all(string = Description, pattern = "\\[[a-zA-Z ]+\\]") %>%
  unlist %>%
  unique

name_decoder <-
  metadata %>%
  mutate(in_dollars = grepl("$", Description, fixed = TRUE),
         Description = gsub("($)", "", Description, fixed = TRUE),
         weighted.topcode = grepl("[weighted topcode]", Description, fixed = TRUE),
         Description = gsub("[weighted topcode]", "", Description, fixed = TRUE),
         derived.var = grepl("^DV[:] ", Description),
         Description = gsub("^DV[:] ", "", Description),
         imputed.var = grepl("[imputed]", Description, fixed = TRUE),
         Description = gsub("[imputed]", "", Description, fixed = TRUE),
         signed.var = grepl("positive values", Description, ignore.case = TRUE) | grepl("negative values", Description, ignore.case = TRUE),
         sign.of.var = ifelse(signed.var, 
                              ifelse(grepl("positive values", Description, ignore.case = TRUE), 
                                     1L, 
                                     -1L), 
                              NA_integer_),
         # positive values are inconsistently defined in the description
         # e.g [positive values*] Positive values
         Description = gsub("(positive values*)|(negative values*)", "", Description,
                            ignore.case = TRUE),
         SCQ.var = grepl("[SCQ]", Description, fixed = TRUE),
         Description = gsub("[SCQ]", "", Description, fixed = TRUE),
         estimated.var = grepl("[estimated]", Description, fixed = TRUE),
         Long_name = sub("_+$", "", 
                         gsub("[^0-9A-Za-z]+", 
                              "_", 
                              sub("\\s+$", "", Description))),
         Long_name = ifelse(imputed.var, paste0(Long_name, ".i"), Long_name),
         # we should still take note of positive/negative value to avoid two
         # vars having the same name
         Long_name = ifelse(is.na(sign.of.var),
                            Long_name,
                            ifelse(sign.of.var == 1, 
                            paste0(Long_name, ".p"),
                            paste0(Long_name, ".n")))
         ) %>%
  mutate(nVariable = paste0("n", Variable)) %>%
  filter(nVariable %in% names(hilda.w14.hh.raw))

hilda.w14.hh <- copy(hilda.w14.hh.raw)

setnames(hilda.w14.hh,
         old = name_decoder$nVariable, 
         new = name_decoder$Long_name)

# Remove missing values:
# Collapse them because I don't care why
numeric.cols <- sapply(hilda.w14.hh, is.numeric)
# If there are any negative numbers combined with missing values I swear
# to Hadley this script is over.
stopifnot(all(hilda.w14.hh[,numeric.cols, with = FALSE] >= -10))

for (k in which(numeric.cols)){
  set(hilda.w14.hh, j = k, value = ifelse(hilda.w14.hh[[k]] < 0, NA, hilda.w14.hh[[k]]))
}

hilda.w14.hh %>% 
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Household_population_weight) %>%
  mutate(prop_superannuation = Household_wealth_Total_superannuation / (Household_Net_Worth.p - Household_Net_Worth.n)) %>%
  grplot(aes(x = prop_superannuation, weight = Household_population_weight)) + 
  geom_histogram() +
  xlim(-1,1)

Age.vars <- grep("^Age_last", name_decoder$Long_name, value = TRUE)
# HILDA recodes *these* variables as characters with such 
# splendid encodings as [-1] Not asked -> NA

k <- NULL
for (k in Age.vars){
  set(hilda.w14.hh, j = k, value = as.integer(as.character(hilda.w14.hh[[k]])))
}

# Next, determine whether a household has only people of a certain age.
# The ages we are interested in are those between 50 and 60. 
hilda.w14.hh[ ,temp.id := 1:.N]
setkey(hilda.w14.hh, temp.id)
id.by.age <- 
  hilda.w14.hh %>% 
  mutate(temp.id = 1:n()) %>%
  select_(.dots = c("temp.id", Age.vars)) %>%
  melt.data.table(measure.vars = Age.vars, variable.name = "Person", value.name = "Age") %>%
  filter(!is.na(Age)) %>%
  group_by(temp.id) %>%
  summarise(min_age = min(Age),
            max_age = max(Age)) %>%
  mutate(btwn_50_60 = min_age >= 60 & max_age <= 70) %>%
  select(temp.id, btwn_50_60) %>%
  setkey(temp.id)

<<prop_super_distr_by_age>>=
hilda.w14.hh %>%
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_wealth_Cash_investments,
         Household_wealth_Cash_investments.i,
         Household_wealth_Equity_investments, 
         Household_wealth_Equity_investments.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Household_population_weight,
         temp.id) %>%
  merge(id.by.age) %>%
  mutate(prop_superannuation = Household_wealth_Total_superannuation / (Household_Net_Worth.p - Household_Net_Worth.n)) %>%
  grplot(aes(x = prop_superannuation, weight = Household_population_weight,
             fill = btwn_50_60)) + 
  geom_histogram(binwidth = 0.05) +
  scale_y_continuous(labels = function(x){paste0(x/1e6, "M")}) +
  facet_grid(btwn_50_60 ~ .) + 
  xlim(0,1)
@

<<household_wealth_deciles>>=
household.wealth.deciles <- 
  hilda.w14.hh %>%
  mutate(Household_wealth = Household_Net_Worth.p - Household_Net_Worth.n) %>%
  svydesign(ids = ~temp.id, weights = ~Household_population_weight,
            data = .) %>%
  svyquantile(~Household_wealth, design = ., quantiles = (0:10)/10, na.rm = TRUE)
@

<<wealth_by_type_decile>>=
hilda.w14.hh %>%
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_wealth_Cash_investments,
         Household_wealth_Cash_investments.i,
         Household_wealth_Total_bank_accounts, 
         Household_wealth_Total_bank_accounts.i,
         Household_wealth_Equity_investments, 
         Household_wealth_Equity_investments.i,
         Household_wealth_Total_property_Apportioned_value.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Household_population_weight,
         temp.id) %>%
  mutate(Household_wealth = Household_Net_Worth.p - Household_Net_Worth.n,
         Household_wealth_decile = .bincode(Household_wealth, 
                                            breaks = household.wealth.deciles,
                                            include.lowest = TRUE)) %>%
  filter(!is.na(Household_wealth_decile)) %>%
  tidyr::gather(wealth_type, value, 
                Household_wealth_Total_superannuation.i,
                Household_wealth_Total_bank_accounts.i,
                Household_wealth_Equity_investments.i,
                Household_wealth_Total_property_Apportioned_value.i) %>%
  group_by(Household_wealth_decile, wealth_type) %>%
  summarise(value = weighted.mean(value, Household_population_weight)) %>%
  data.table %>%
  grplot(aes(x = factor(Household_wealth_decile), y = value, 
             fill = wealth_type)) + 
  geom_bar(stat = "identity", width = 1) + 
  scale_y_continuous(label = function(x)paste0(grattan_dollar(x/1e6), " M"),
                     limits = c(0,3e6),
                     expand = c(0,0)) + 
  theme(legend.position = c(0.3,0.8)) + 
  guides(fill = guide_legend(reverse = TRUE))
@

<<wealth_by_type_decile-by-age>>=
hilda.w14.hh %>%
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_wealth_Cash_investments,
         Household_wealth_Cash_investments.i,
         Household_wealth_Total_bank_accounts, 
         Household_wealth_Total_bank_accounts.i,
         Household_wealth_Equity_investments, 
         Household_wealth_Equity_investments.i,
         Household_wealth_Total_property_Apportioned_value.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Age = Age_last_birthday_at_June_30_2014_person_01,
         Household_population_weight,
         temp.id) %>%
  mutate(Household_wealth = Household_Net_Worth.p - Household_Net_Worth.n,
         Household_wealth_decile = .bincode(Household_wealth, 
                                            breaks = household.wealth.deciles,
                                            include.lowest = TRUE)) %>%
  filter(!is.na(Household_wealth_decile)) %>%
  tidyr::gather(wealth_type, value, 
                Household_wealth_Total_superannuation.i,
                Household_wealth_Total_bank_accounts.i,
                Household_wealth_Equity_investments.i,
                Household_wealth_Total_property_Apportioned_value.i) %>%
  filter(!is.na(Age)) %>% 
  group_by(AgeSubset = cut(Age, breaks = c(-Inf, 60, 65, Inf), 
                           labels = c("18-60", "60-65", "65+")),
           Household_wealth_decile, 
           wealth_type) %>%
  summarise(value = weighted.mean(value, Household_population_weight)) %>%
  data.table %>%
  mutate(wealth_type = factor(wealth_type,
                              labels = gsub("_", " ", 
                                            gsub("Household_wealth_", 
                                                 "", 
                                                 levels(wealth_type), 
                                                 fixed = TRUE)
                                            )
  )) %>%
           grplot(aes(x = factor(Household_wealth_decile), y = value, 
             fill = wealth_type)) + 
  geom_bar(stat = "identity", width = 1) + 
  scale_y_continuous(label = function(x)paste0(grattan_dollar(x/1e6), " M"),
                     limits = c(0,4e6),
                     expand = c(0,0)) + 
  facet_grid(~AgeSubset) + 
  theme(legend.position = c(0.3,0.8)) + 
  guides(fill = guide_legend(reverse = TRUE))
@

<<ScatterPlot-Wealth-against-age>>=
hilda.w14.hh %>%
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_wealth_Cash_investments,
         Household_wealth_Cash_investments.i,
         Household_wealth_Total_bank_accounts, 
         Household_wealth_Total_bank_accounts.i,
         Household_wealth_Equity_investments, 
         Household_wealth_Equity_investments.i,
         Household_wealth_Total_property_Apportioned_value.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Age = Age_last_birthday_at_June_30_2014_person_01,
         Household_population_weight,
         temp.id) %>%
  mutate(Household_wealth = Household_Net_Worth.p - Household_Net_Worth.n) %>%
  grplot(aes(x = jitter(Age, factor = 2), y = Household_wealth, alpha = Household_population_weight, weight = Household_population_weight)) + 
  geom_point() +
  stat_smooth() + 
  geom_density_2d() + 
  scale_y_log10()
@

<<ScatterPlot-HomeWealth-by-Age>>=
hilda.w14.hh %>%
  select(Household_wealth_Total_superannuation,
         Household_wealth_Total_superannuation.i,
         Household_wealth_Cash_investments,
         Household_wealth_Cash_investments.i,
         Household_wealth_Total_bank_accounts, 
         Household_wealth_Total_bank_accounts.i,
         Household_wealth_Equity_investments, 
         Household_wealth_Equity_investments.i,
         Household_wealth_Total_property_Apportioned_value.i,
         Household_Net_Worth.p,
         Household_Net_Worth.n,
         Age = Age_last_birthday_at_June_30_2014_person_01,
         Household_population_weight,
         temp.id) %>%
  mutate(Household_wealth = Household_Net_Worth.p - Household_Net_Worth.n) %>%
  grplot(aes(x = jitter(Age, factor = 2), y = Household_wealth_Total_property_Apportioned_value.i, alpha = Household_population_weight, weight = Household_population_weight)) + 
  geom_point() +
  stat_smooth() + 
  geom_density_2d() 
@

\section{Lump sum}

<<hilda_Ep, eval=FALSE>>=
enumerate.person.files <- 
  list.files(path = "../HILDA/Wave14/"
                    ,pattern = "^E.*dta$"  # Enumerate person
                    ,full.names = TRUE)

enumerate.person.files.names <-
  gsub("^.*/([^/]+)\\.dta$", "\\1", enumerate.person.files )

hilda_list <-
  lapply(enumerate.person.files, read_hilda_file)

names(hilda_list) <- enumerate.person.files.names

lapply(seq_along(hilda_list), function(element) readr::write_csv(hilda_list[[element]], path = paste0("../HILDA/Wave14/csv/", names(hilda_list)[element], ".csv")))
@

<<Eperson, eval=F>>=
hilda_Ep <- 
  rbindlist(lapply(list.files(path = "../HILDA/Wave14/csv",
                              pattern = "E.*csv$", 
                              full.names = TRUE),
                   read_hilda_strip_first_letter_add_column_id),
            use.names = TRUE,
            fill = TRUE
  )
@

<<hilda_Rp, eval=FALSE>>=
read_hilda_file <- 
  function(filename){
    dplyr::mutate(data.table::data.table(foreign::read.dta(filename)),
                  orig.filename = filename)
  }

enumerate.person.files <- 
  list.files(path = "../HILDA/Wave14/"
                    ,pattern = "^R.*dta$"  # Responding person
                    ,full.names = TRUE)

enumerate.person.files.names <-
  gsub("^.*/([^/]+)\\.dta$", "\\1", enumerate.person.files )

hilda_list <-
  lapply(enumerate.person.files, read_hilda_file)

names(hilda_list) <- enumerate.person.files.names

lapply(seq_along(hilda_list), 
       function(element) readr::write_csv(hilda_list[[element]], 
                                          path = paste0("../HILDA/Wave14/csv/", 
                                                        names(hilda_list)[element], 
                                                        ".csv")))
@



<<hilda_Rp_combine>>=
hilda_Rp <- 
  rbindlist(lapply(list.files(path = "../HILDA/Wave14/csv",
                              pattern = "R.*csv$", 
                              full.names = TRUE),
                   read_hilda_strip_first_letter_add_column_id),
            use.names = TRUE,
            fill = TRUE
  ) %>%
  select(wave, 
         hhwtrp, 
         oiflssa,
         oifsupi
         )




set_NAs <- function(hilda){
  integer.cols <- which(sapply(hilda, class) == "integer")
  numeric.cols <- which(sapply(hilda, class) == "numeric")
  
  for (j in integer.cols){
    set(hilda, j = j, value = ifelse(hilda[[j]] < 0, NA_integer_, hilda[[j]]))
  }
  
  for (j in numeric.cols){
    set(hilda, j = j, value = ifelse(hilda[[j]] < 0, NA_real_, hilda[[j]]))
  }
}

set_NAs(hilda_Rp)
@
<<PC-update-lump-sum>>=
hilda_Rp %>%
  select(wave, 
         Responding_person_weight = hhwtrp, 
         Super_lump_sum = oiflssa,
         Super_income = oifsupi
         ) %>%
  group_by(wave) %>%
  summarise(total_lump_sum = sum(Super_lump_sum * Responding_person_weight, na.rm = TRUE),
            total_super_income = sum(Super_income * Responding_person_weight, na.rm = TRUE)
            ) %T>%
  chart_data() %>%
  gather(group, value, total_lump_sum:total_super_income) %>% 
  grplot(aes(x = factor(as.integer(factor(wave))), 
             y = value, group = group, color = group)) + 
  geom_line() +
  scale_y_continuous(label = function(val){paste0("$", val/1e9, "bn")})
@

<<b>>=
hilda_Rp %>%
  select(wave, 
         Responding_person_weight = hhwtrp, 
         Super_lump_sum = oiflssa,
         Super_income = oifsupi
         ) %>%
  group_by(wave) %>%
  summarise(median_lump_sum = matrixStats::weightedMedian(Super_lump_sum, Responding_person_weight, na.rm = TRUE)) %>%
  grplot(aes(x = factor(as.integer(factor(wave))), 
             y = median_lump_sum)) + 
  geom_line(group = 1) +
  scale_y_continuous(label = grattan_dollar)
@


\end{document}
